Parameters:
  ivanKukushkinProjectHomeIp:
    Type: String
    Description: my changing ip
  ivanKukushkinProjectAMI:
    Type: String
    Description: my ami image id
  ivanKukushkinInstanceType:
    Type: String
    Description: desired instance type
  DBUsername:
    Type: String
    Description: The database admin account username
  DBPassword:
    Type: String
    Description: The database admin account password
    NoEcho: true
  DBName:
    Type: String
    Description: The name of the database
  AWSRegion:
    Type: String
    Default: us-west-2
    Description: Region where resources will be deployed
Resources:
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ivan-kukushkin-bucket
      WebsiteConfiguration:
        IndexDocument: index.html
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: ivan-kukushkin-project-Network
  ProjectUploadsNotificationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ivan-kukushkin-project-UploadsNotificationQueue
  ProjectUploadsNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ivan-kukushkin-project-UploadsNotificationTopic
  CombinedAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: S3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                Resource: *
        - PolicyName: SQSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt ProjectUploadsNotificationQueue.Arn
        - PolicyName: SNSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                  - sns:Subscribe
                  - sns:ListSubscriptionsByTopic
                  - sns:Unsubscribe
                  - SNS:SetSubscriptionAttributes
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Ref ProjectUploadsNotificationTopic
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ivan-kukushkin-project-InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ivan-kukushkin-project-PublicRouteTable
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ivan-kukushkin-project-PrivateRouteTable
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AssignIpv6AddressOnCreation: false
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWSRegion
      CidrBlock: 10.0.11.0/24
      EnableDns64: false
      Ipv6Native: false
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ivan-kukushkin-project-PublicSubnet-A
      VpcId: !Ref VPC
  PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AssignIpv6AddressOnCreation: false
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWSRegion
      CidrBlock: 10.0.12.0/24
      EnableDns64: false
      Ipv6Native: false
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: ivan-kukushkin-project-PrivateSubnet
      VpcId: !Ref VPC
  AdditionalPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWSRegion
      CidrBlock: 10.0.13.0/24
      EnableDns64: false
      Ipv6Native: false
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: ivan-kukushkin-project-PrivateSubnet-B
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable
  AdditionalPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AdditionalPrivateSubnet
      RouteTableId: !Ref PrivateRouteTable
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
      RoleName: EC2InstanceRole
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CommonLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: UploadsNotificationFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref ProjectUploadsNotificationTopic
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt ProjectUploadsNotificationQueue.Arn
        - PolicyName: DataConsistencyFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds-db:connect
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${Bucket}
        - PolicyName: S3LogsFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${Bucket}
        - PolicyName: LambdaVpcPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:AssignPrivateIpAddresses
                  - ec2:UnassignPrivateIpAddresses
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                Resource: '*'
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref CombinedAccessRole
    DependsOn:
      - CombinedAccessRole
  SecurityGroupEC2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and RDS access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref ivanKukushkinProjectHomeIp
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
  SecurityGroupRDS:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access from EC2 only
      VpcId: !Ref VPC
  EC2ToRDSIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupRDS
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref SecurityGroupEC2
  LambdaExecutionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Lambda access to RDS
      VpcId: !Ref VPC
  LambdaToRDSIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupRDS
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref LambdaExecutionSecurityGroup
  EC2Instance:
    DependsOn: SecurityGroupEC2
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref ivanKukushkinInstanceType
      SecurityGroupIds:
        - !Ref SecurityGroupEC2
      KeyName: Work-pc
      SubnetId: !Ref PublicSubnetA
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Ref ivanKukushkinProjectAMI
      Tags:
        - Key: Name
          Value: ivan-kukushkin-project-EC2Instance
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          yum update -y
          yum install -y java-17-amazon-corretto-devel
          sudo wget https://dev.mysql.com/get/mysql80-community-release-el9-1.noarch.rpm
          sudo dnf install mysql80-community-release-el9-1.noarch.rpm -y
          sudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2023
          sudo dnf install mysql-community-client -y
          sudo rm mysql80-community-release-el9-1.noarch.rpm -f
          sudo dnf install -y ruby wget
          sudo wget https://aws-codedeploy-${AWSRegion}.s3.${AWSRegion}.amazonaws.com/latest/install
          sudo chmod +x ./install
          sudo ./install auto
          sudo systemctl enable codedeploy-agent
          sudo systemctl start codedeploy-agent
          echo "DB_USER=${DBUsername}" >> /etc/environment
          echo "DB_PASSWORD=${DBPassword}" >> /etc/environment
          echo "DB_HOST=${RDSInstance.Endpoint.Address}" >> /etc/environment
          echo "DB_NAME=${DBName}" >> /etc/environment
          echo "S3_BUCKET_NAME=${Bucket}" >> /etc/environment
          echo "NOTIFICATION_QUEUE=${ProjectUploadsNotificationQueue}" >> /etc/environment
          echo "NOTIFICATION_TOPIC=${ProjectUploadsNotificationTopic}" >> /etc/environment
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: MySQL
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !Ref SecurityGroupRDS
      DBSubnetGroupName: !Ref DBSubnetGroup
      BackupRetentionPeriod: 0
      StorageType: gp2
      PubliclyAccessible: false
      MultiAZ: false
      DBInstanceIdentifier: ivan-kukushkin-project-rds-instance
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Private subnets for RDS instance
      SubnetIds:
        - !Ref PrivateSubnet
        - !Ref AdditionalPrivateSubnet
Outputs:
  CombinedAccessRoleArn:
    Value: !GetAtt CombinedAccessRole.Arn
    Export:
      Name: CombinedAccessRoleArn
  UploadsNotificationQueueArn:
    Value: !GetAtt ProjectUploadsNotificationQueue.Arn
    Export:
      Name: UploadsNotificationQueueArn
  UploadsNotificationTopicArn:
    Value: !Ref ProjectUploadsNotificationTopic
    Export:
      Name: UploadsNotificationTopicArn
  RdsInstanceEndpoint:
    Value: !GetAtt RDSInstance.Endpoint.Address
    Export:
      Name: RdsInstanceEndpoint
  RdsDatabaseName:
    Value: !Ref DBName
    Export:
      Name: RdsDatabaseName
  S3BucketName:
    Value: !Ref Bucket
    Export:
      Name: S3BucketName
  LambdaExecutionRole:
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: LambdaExecutionRole
  AWSRegion:
    Value: !Ref AWSRegion
    Export:
      Name: AWSRegion
  PrivateSubnet:
    Value: !Ref PrivateSubnet
    Export:
      Name: PrivateSubnet
  AdditionalPrivateSubnet:
    Value: !Ref AdditionalPrivateSubnet
    Export:
      Name: AdditionalPrivateSubnet
  LambdaExecutionSecurityGroup:
    Value: !Ref LambdaExecutionSecurityGroup
    Export:
      Name: LambdaExecutionSecurityGroup
